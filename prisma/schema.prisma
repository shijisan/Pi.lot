datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String             @id @default(uuid()) @db.Uuid
  fullName      String
  email         String             @unique
  password      String
  createdAt     DateTime           @default(now())
  organizations OrganizationUser[]
  ownedOrgs     Organization[]     @relation("UserOwnedOrgs")
  Task          Task[]
}

model Organization {
  id        String             @id @default(uuid()) @db.Uuid
  ownerId   String             @db.Uuid
  owner     User               @relation("UserOwnedOrgs", fields: [ownerId], references: [id])
  name      String
  users     OrganizationUser[]
  userCount Int                @default(0)
  createdAt DateTime           @default(now())
  chatrooms Chatroom[]
  labels    UserLabel[]
  Contact   Contact[]
  Task      Task[]
}

model UserLabel {
  id             String             @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  color          String?
  createdAt      DateTime           @default(now())
  organizationId String             @db.Uuid
  organization   Organization       @relation(fields: [organizationId], references: [id])
  users          OrganizationUser[] @relation("UserLabelToOrgUser")
  chatroomAccess ChatroomAccess[]
}

model OrganizationUser {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  role           Role
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  userLabelId String?    @db.Uuid
  userLabel   UserLabel? @relation("UserLabelToOrgUser", fields: [userLabelId], references: [id])

  @@unique([userId, organizationId])
}

enum Role {
  CREATOR
  MODERATOR
  DEFAULT
}

model Chatroom {
  id             String           @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  organizationId String           @db.Uuid
  organization   Organization     @relation(fields: [organizationId], references: [id])
  labelAccess    ChatroomAccess[]
  messages       Message[]
}

model ChatroomAccess {
  id         String    @id @default(uuid()) @db.Uuid
  chatroomId String    @db.Uuid
  labelId    String    @db.Uuid
  canRead    Boolean   @default(true)
  canWrite   Boolean   @default(false) // More restrictive by default
  chatroom   Chatroom  @relation(fields: [chatroomId], references: [id])
  userLabel  UserLabel @relation(fields: [labelId], references: [id])

  @@unique([chatroomId, labelId])
}

model Message {
  id         String   @id @default(uuid()) @db.Uuid
  chatroomId String   @db.Uuid
  sender     String
  content    String
  createdAt  DateTime @default(now())
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])

  @@index([chatroomId])
}

model Contact {
  id             String       @id @default(uuid()) @db.Uuid
  fullName       String
  email          String?      @unique
  phone          String?
  position       String?
  company        String?
  notes          String?
  createdAt      DateTime     @default(now())
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
}

model Task {
  id             String       @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  status         TaskStatus   @default(PENDING)
  dueDate        DateTime?
  priority       TaskPriority @default(NORMAL)
  assignedToId   String?      @db.Uuid
  assignedTo     User?        @relation(fields: [assignedToId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
}
